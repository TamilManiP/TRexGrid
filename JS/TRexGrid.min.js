!function (t, n, e, i) { function a(n, e) { this.initOnLoad = function () { return n.$element.is("table") }, this.init = function () { n.$element.wrap(t("<div />", { id: "tRexGrid", "class": "tRexGrid" })) } } function r(n, e) { this.initOnLoad = function () { h = [], f = e.datasource.records; for (var t = 0; t < f.length; t += 1) for (var n in f[t]) -1 === h.indexOf(n) && h.push(n); return !0 }, this.init = function () { var i = t("<thead/>"), a = t("<tr />"); n.$element.append(i), p = e.table.columns; for (var r = 0; r < p.length; r++) a.append(this._headWriter(r, p[r].column, h[r], p[r].type)); i.append(a); var o = t("<tfoot />").append(t("<tr />", { text: "Total records: " + f.length }).append('<div class="tRexInner"><a style="text-decoration:none;cursor:pointer;"><span class="glyphicon glyphicon-cog" style="color:white;align:center;font-size:30px;"></span></a></div>')); i.after(o) }, this._headWriter = function (n, i, a, r) { var o = t("<th />", { id: a }); if ("hdn" == r && o.addClass("hidden"), e.table.defaultColumnIdStyle && (i = u.normalizeText(i, e.table.defaultColumnIdStyle)), e.features.sort) { var s = t('<span class="dropdown pull-right"><a href="javascript:void(0);" id="sorticon" class="glyphicon glyphicon-filter"></a><div class="dropdown-content"><a href="#"><span class="glyphicon glyphicon-sort-by-attributes"></span>&nbsp;&nbsp;Sort Asc</a><a href="#"><span class="glyphicon glyphicon-sort-by-attributes-alt"></span>&nbsp;&nbsp;Sort Desc</a></div></span>'); return o.text(i).append(s) } return o.text(i) } } function o(n, e) { this.initOnLoad = function () { return !0 }, this.init = function () { g = arguments[0] || 0; var i = t("<tbody />"); n.$element.append(i); for (var a = g * e.paginate.maxRows; a < g * e.paginate.maxRows + e.paginate.maxRows; a += 1) for (var r = t("<tr>", { "class": "" }).appendTo(i), o = 0; o < h.length; o += 1) t(this._rowWriter(a, o, f[a][h[o]], h[o])).appendTo(r) }, this._rowWriter = function (n, e, i, a) { var r = t("<td />", { id: a }), o = { link: function () { return r.html(t("<a id=" + a + " />", { text: i, href: "#" })) }, ed: function () { return r.html('<input type="text" class="edinput" value=' + i + " id=" + a + "/>") }, prg: function () { t.isNumeric(i) || (i = 0); var n = t("<div />").css({ "background-color": i > 50 ? "#FFE01A" : "#E2B842", height: "20px", width: i + "%", "text-align": "center", color: "#012B39" }).text(i), e = t("<div />").css({ "background-color": "rgba(255,255,255,0.3)", width: "100%", "text-align": "center" }); return e.html(n), r.html(e) }, chk: function () { return r.html("<input id=" + n + "_" + e + ' type="checkbox" ' + ("1" == i ? "checked='checked'" : "unchecked='uncheked'") + ' /><label id="checkb" for=' + n + "_" + e + "></label>") }, radio: function () { return r.html('<label class="radio inline"><input type="radio" name=' + a + " " + ("1" == i ? "checked='checked'" : "unchecked='uncheked'") + " /><span></span></label>") }, dropdown: function () { return t.isNumeric(i) ? "-" == i[0] ? r.addClass("negation").text(i) : r.text(i) : r.addClass("err").text(i) }, hdn: function () { return r.addClass("hidden").text(i) }, ro: function () { return r.text(i) }, "default": function () { return r.text(i) } }; return o[p[e].type] ? o[p[e].type]() : o["default"]() } } function s(n, e) { this.initOnLoad = function () { return e.features.paginate ? !0 : !1 }, this.init = function () { n.$element.after(this._getNavBar()), i(), new o(n, e).init(0) }; var i = function () { n.$element.find("tbody").html("") }; this._getNavBar = function () { for (var n = t("<div>", { "class": "paginglink" }), i = 0; i < Math.ceil(f.length / e.paginate.maxRows) ; i++) { t("<a>", { href: "#", text: i + 1, "data-page": i }).bind("click", function (t) { a(t) }).appendTo(n) } return t("<a>", { href: "#", text: "<", "data-direction": -1 }).bind("click", function (t) { r(t) }).prependTo(n), t("<a>", { href: "#", text: ">", "data-direction": 1 }).bind("click", function (t) { r(t) }).appendTo(n), n }; var a = function (a) { a.preventDefault(), i(); var r = t(a.target).attr("data-page"); callback = new o(n, e).init(r) }, r = function (a) { a.preventDefault(), i(), -1 == t(a.target).attr("data-direction") ? new o(n, e).init(0 > g - 1 ? 0 : g - 1) : new o(n, e).init(0 > g + 1 ? 0 : g + 1) } } var c, l, d, u, p, h, f, g, x = { _dom: a, _header: r, _rowWriter: o, _pagination: s }; c = { features: { paginate: !0, sort: !0, search: !0, recordCount: !0 }, paginate: { maxRows: 10, activePage: 0 }, table: { tablefooter: !0, tablefooterSumColumn: "unknown", defaultColumnIdStyle: "camelCase", columns: [{ column: "unknown", type: "ro" }], headRowClass: null }, inputs: { sorts: null, paginationClass: "", paginationLinkClass: "", paginationPrevClass: "", paginationNextClass: "", paginationActiveClass: "", paginationDisabledClass: "", paginationPrev: "", paginationNext: "", recordCountText: "Showing ", processingText: "Processing..." }, datasource: { ajax: !1, ajaxUrl: null, ajaxCache: null, ajaxOnLoad: !1, ajaxMethod: "GET", ajaxDataType: "json", totalRecordCount: null, records: null } }, l = { init: function (n, e) { return this.settings = t.extend(!0, c, e), this.element = n, this.$element = t(n), d.call(this), this } }, d = function () { this.$element.trigger("tRexGrid:preinit", this); for (Model in x) if (x.hasOwnProperty(Model)) { var t = this[Model] = new x[Model](this, this.settings); t.initOnLoad() && t.init() } }, u = l.utility = { normalizeText: function (t, n) { return t = this.textTransform[n](t) }, textTransform: { trimDash: function (t) { return t.replace(/^\s+|\s+$/g, "").replace(/\s+/g, "-") }, camelCase: function (t) { return t } } }, "function" != typeof Object.create && (Object.create = function (t) { function n() { } return n.prototype = t, new n }), t.tRexGridConfig = function (n) { this.options = t.extend({}, c, n) }, t.tRexGrid = function (n) { t.fn.tRexGrid = function (e) { return this.each(function () { t.data(this, "tRexGrid") || t.data(this, "tRexGrid", new n.init(this, e)) }) } }, t.tRexGrid(l) }(jQuery, window, document);